/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'jacoco'                          // Code coverage
    id 'org.sonarqube' version '4.4.1.3373' // SonarQube integration
    id 'com.google.cloud.tools.jib' version '3.4.0' // Containerization
    id 'org.springdoc.openapi-gradle-plugin' version '1.8.0' // OpenAPI docs
}

group = 'com.smartcms'
version = '1.0.0'
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}



repositories {
    mavenCentral()
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/smartcms-tech/smart-common")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME_GITHUB")
            password = project.findProperty("gpr.key") ?: System.getenv("TOKEN_GITHUB")
        }
    }
}


dependencies {
    // Core
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // API Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0' // Swagger

    // Observability
    implementation 'io.micrometer:micrometer-registry-prometheus' // Metrics
    implementation 'io.micrometer:micrometer-tracing-bridge-brave' // Distributed tracing
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.35.0' // OpenTelemetry

    implementation 'com.smartcms:smart-common:3.0.1-SNAPSHOT'
    // Resilience
//    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:3.1.0'
//    implementation 'org.springframework.retry:spring-retry' // Retry mechanism

    // Lombok (to reduce boilerplate code)
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // âœ… Optional: Elasticsearch for Full-Text Search (Uncomment if needed)
    // implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

    // Test
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.11.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:mongodb:1.19.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    testImplementation 'org.mockito:mockito-core:5.2.0'
}

// ========== Quality Gates ==========
sonarqube {
    properties {
        property "sonar.projectKey", "smartcms_smartcontent"
        property "sonar.coverage.jacoco.xmlReportPaths",
                layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml").get().asFile
        property "sonar.test.exclusions", "**/*Test.java"
    }
}

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir("reports/jacoco")
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true // Required for Sonar
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/config/**",
                    "**/dto/**",
                    "**/exception/**",
                    "**/model/**",         // Simple data models
                    "**/SmartContentApplication.java"  // Main application class
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.40 // 70% coverage minimum
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

// ========== Containerization ==========
jib {
    from {
        image = 'eclipse-temurin:21-jre-jammy'
    }
    to {
        image = 'smartcms/smartcontent'
        tags = ['latest', "${version}"]
    }
    container {
        ports = ['8080']
        environment = [
                'JAVA_OPTS': '-XX:+UseContainerSupport -Dfile.encoding=UTF-8'
        ]
    }
}

// ========== Build Config ==========
tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

bootJar {
    archiveFileName = 'smart-content.jar'
    layered {
        enabled = true // Optimize Docker layers
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.smartcms.smartcontent.SmartContentApplication' // Replace with your main class
        )
    }
}
