package com.smartcms.smartcontent.utility;

import com.smartcms.smartcontent.client.SmartAIClient;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.stream.Stream;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class SlugGeneratorTest {

    @Mock
    private SmartAIClient smartAIClient;

    @InjectMocks
    private SlugGenerator slugGenerator;

    // Parameterized test for generateSlug
    @ParameterizedTest
    @MethodSource("slugTestCases")
    void testGenerateSlug(String input, String expectedOutput) {
        String slug = slugGenerator.generateSlug(input);
        assertEquals(expectedOutput, slug);
    }

    // Test cases for generateSlug
    private static Stream<Arguments> slugTestCases() {
        return Stream.of(
                Arguments.of("Best Java Backend Practices", "best-java-backend-practices"),
                Arguments.of("Why Use Spring Boot? ðŸ¤”", "why-use-spring-boot"),
                Arguments.of("CafÃ© au Lait & Croissant", "cafe-au-lait-croissant"),
                Arguments.of("  Leading and Trailing Spaces  ", "leading-and-trailing-spaces"),
                Arguments.of("Multiple    Spaces", "multiple-spaces"),
                Arguments.of("Top 10 Java Frameworks in 2023", "top-10-java-frameworks-in-2023"),
                Arguments.of("Java Backend BEST Practices", "java-backend-best-practices"),
                Arguments.of("Java-Backend-Practices", "java-backend-practices"),
                Arguments.of("Java_Backend_Practices", "java-backend-practices"),
                Arguments.of("---Java Backend Practices---", "java-backend-practices")
        );
    }

    @Test
    void testGenerateSlug_NullTitle() {
        String title = null;
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            slugGenerator.generateSlug(title);
        });
        assertEquals("Input cannot be null or empty", exception.getMessage());
    }

    @Test
    void testGenerateSlug_FallbackSlug() {
        // Arrange
        String description = "@#$%^&*()"; // Input that results in an empty slug
        String emptySlug = "";
        // Mock the SmartAIClient to return an empty slug
        when(smartAIClient.generateSlug(description)).thenReturn(emptySlug);
        // Act
        String slug = slugGenerator.generateSlugWithAI(description);
        // Assert
        assertTrue(slug.startsWith("untitled-")); // Fallback slug should start with "untitled-"
        verify(smartAIClient, times(1)).generateSlug(description); // SmartAIClient should be called
    }

    @Test
    void testGenerateSlug_AIGeneratedSlug() {
        // Arrange
        String description = "Slug is Generated by AI"; // Input that results in an AI slug
        String aiGeneratedSlug = "ai-generated-slug";

        // Mock the SmartAIClient to return an empty slug
        when(smartAIClient.generateSlug(description)).thenReturn(aiGeneratedSlug);
        // Act
        String slug = slugGenerator.generateSlugWithAI(description);
        // Assert
        assertEquals(aiGeneratedSlug, slug);
        verify(smartAIClient, times(1)).generateSlug(description); // SmartAIClient should be called
    }
}