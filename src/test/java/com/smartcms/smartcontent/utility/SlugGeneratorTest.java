package com.smartcms.smartcontent.utility;

import com.smartcms.smartcommon.model.ContentStatus;
import com.smartcms.smartcontent.client.SmartAIClient;
import com.smartcms.smartcontent.repository.ContentRepository;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.List;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class SlugGeneratorTest {

    @Mock
    private SmartAIClient smartAIClient;

    @Mock
    private ContentRepository contentRepository;

    @InjectMocks
    private SlugGenerator slugGenerator;

    @ParameterizedTest(name = "[{index}] Input: \"{0}\" â†’ Expected Slug: \"{1}\"")
    @MethodSource("slugTestCases")
    @DisplayName("Should correctly generate slugs from various input formats")
    void testGenerateSlug(String input, String expectedOutput) {
        String slug = slugGenerator.generateSlug(input);
        assertEquals(expectedOutput, slug);
    }

    private static Stream<Arguments> slugTestCases() {
        return Stream.of(
                Arguments.of("Best Java Backend Practices", "best-java-backend-practices"),
                Arguments.of("Why Use Spring Boot? ðŸ¤”", "why-use-spring-boot"),
                Arguments.of("CafÃ© au Lait & Croissant", "cafe-au-lait-croissant"),
                Arguments.of("  Leading and Trailing Spaces  ", "leading-and-trailing-spaces"),
                Arguments.of("Multiple    Spaces", "multiple-spaces"),
                Arguments.of("Top 10 Java Frameworks in 2023", "top-10-java-frameworks-in-2023"),
                Arguments.of("Java Backend BEST Practices", "java-backend-best-practices"),
                Arguments.of("Java-Backend-Practices", "java-backend-practices"),
                Arguments.of("Java_Backend_Practices", "java-backend-practices"),
                Arguments.of("---Java Backend Practices---", "java-backend-practices")
        );
    }

    @Test
    @DisplayName("Should throw IllegalArgumentException when input is null")
    void testGenerateSlug_NullInput_ThrowsException() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            slugGenerator.generateSlug(null);
        });
        assertEquals("Input cannot be null or empty", exception.getMessage());
    }

    @Test
    @DisplayName("Should fallback to untitled slug when AI returns empty string")
    void testGenerateSlugWithAI_FallbackSlug() {
        String description = "@#$%^&*()";
        when(smartAIClient.generateSlug(description)).thenReturn("");

        String slug = slugGenerator.generateSlugWithAI(description);

        assertTrue(slug.startsWith("untitled-"));
        verify(smartAIClient, times(1)).generateSlug(description);
    }

    @Test
    @DisplayName("Should return AI-generated slug when valid slug is returned from AI")
    void testGenerateSlugWithAI_ValidAISlug() {
        String description = "Slug is Generated by AI";
        String aiGeneratedSlug = "ai-generated-slug";
        when(smartAIClient.generateSlug(description)).thenReturn(aiGeneratedSlug);

        String slug = slugGenerator.generateSlugWithAI(description);

        assertEquals(aiGeneratedSlug, slug);
        verify(smartAIClient, times(1)).generateSlug(description);
    }

    @Test
    @DisplayName("Should return base slug if it is available")
    void testGenerateUniqueSlug_BaseSlugAvailable() {
        String title = "Unique SEO Title";
        String description = "Some long description here";
        String baseSlug = "unique-seo-title";
        String orgId = "org123";

        when(contentRepository.existsBySlugAndOrgDetails_OrgIdAndStatus(baseSlug, orgId, ContentStatus.PUBLISHED))
                .thenReturn(false);

        String result = slugGenerator.generateUniqueSlug(title, description, orgId);
        assertEquals(baseSlug, result);
    }


    @Test
    @DisplayName("Should return slug with counter if base slug is taken")
    void testGenerateUniqueSlug_WithCounterFallback() {
        String title = "My Awesome Content";
        String description = "This is a detailed explanation of awesome content.";
        String baseSlug = "my-awesome-content";
        String orgId = "org123";

        // Mock DB responses
        when(contentRepository.existsBySlugAndOrgDetails_OrgIdAndStatus(baseSlug, orgId, ContentStatus.PUBLISHED))
                .thenReturn(true);
        when(contentRepository.existsBySlugAndOrgDetails_OrgIdAndStatus(baseSlug + "-1", orgId, ContentStatus.PUBLISHED))
                .thenReturn(true);
        when(contentRepository.existsBySlugAndOrgDetails_OrgIdAndStatus(baseSlug + "-2", orgId, ContentStatus.PUBLISHED))
                .thenReturn(false);

        String result = slugGenerator.generateUniqueSlug(title, description, orgId);

        assertEquals("my-awesome-content-2", result);
    }

    @Test
    @DisplayName("Should fallback to random slug if all counters taken")
    void testGenerateUniqueSlug_FallbackToRandom() {
        String title = "Highly Popular Title";
        String description = "Doesnâ€™t matter here";
        String baseSlug = "highly-popular-title";
        String orgId = "org123";

        // All 6 options are taken
        when(contentRepository.existsBySlugAndOrgDetails_OrgIdAndStatus(baseSlug, orgId, ContentStatus.PUBLISHED))
                .thenReturn(true);
        for (int i = 1; i <= 5; i++) {
            when(contentRepository.existsBySlugAndOrgDetails_OrgIdAndStatus(baseSlug + "-" + i, orgId, ContentStatus.PUBLISHED))
                    .thenReturn(true);
        }

        String result = slugGenerator.generateUniqueSlug(title, description, orgId);

        assertTrue(result.matches(baseSlug + "-[a-z0-9]{4}"));
    }

    @Test
    @DisplayName("Should return true when slug is available for new content")
    void testIsSlugAvailable_ReturnsTrue() {
        String slug = "available-slug";
        String orgId = "org123";
        String contentId = "abc123";

        when(contentRepository.existsBySlugAndOrgDetails_OrgIdAndStatusAndIdNot(slug, orgId, ContentStatus.PUBLISHED, contentId))
                .thenReturn(false);

        boolean result = slugGenerator.isSlugAvailable(slug, orgId, contentId);
        assertTrue(result);
    }

    @Test
    @DisplayName("Should return false when slug is already in use")
    void testIsSlugAvailable_ReturnsFalse() {
        String slug = "used-slug";
        String orgId = "org123";
        String contentId = "abc123";

        when(contentRepository.existsBySlugAndOrgDetails_OrgIdAndStatusAndIdNot(slug, orgId, ContentStatus.PUBLISHED, contentId))
                .thenReturn(true);

        boolean result = slugGenerator.isSlugAvailable(slug, orgId, contentId);
        assertFalse(result);
    }

    @Test
    @DisplayName("Should return list of available slug suggestions")
    void testGenerateSlugSuggestions_WithAvailableOptions() {
        String baseSlug = "smart-article";
        String orgId = "org123";

        when(contentRepository.existsBySlugAndOrgDetails_OrgIdAndStatus(baseSlug + "-1", orgId, ContentStatus.PUBLISHED)).thenReturn(false);
        when(contentRepository.existsBySlugAndOrgDetails_OrgIdAndStatus(baseSlug + "-2", orgId, ContentStatus.PUBLISHED)).thenReturn(true);
        when(contentRepository.existsBySlugAndOrgDetails_OrgIdAndStatus(baseSlug + "-3", orgId, ContentStatus.PUBLISHED)).thenReturn(false);

        List<String> suggestions = slugGenerator.generateSlugSuggestions(baseSlug, orgId);
        assertEquals(List.of("smart-article-1", "smart-article-3"), suggestions);
    }

    @Test
    @DisplayName("Should fallback to random suggestion when all others are taken")
    void testGenerateSlugSuggestions_FallbackToRandom() {
        String baseSlug = "taken-slug";
        String orgId = "org123";

        when(contentRepository.existsBySlugAndOrgDetails_OrgIdAndStatus(anyString(), eq(orgId), eq(ContentStatus.PUBLISHED)))
                .thenReturn(true); // All taken

        List<String> suggestions = slugGenerator.generateSlugSuggestions(baseSlug, orgId);
        assertEquals(1, suggestions.size());
        assertTrue(suggestions.get(0).matches("taken-slug-[a-z0-9]{4}"));
    }


}
